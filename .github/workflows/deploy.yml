name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  NPM_CONFIG_CACHE: '~/.npm'

jobs:
  # Build and Test Matrix
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [client, server]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Install dependencies
        working-directory: ./${{ matrix.project }}
        run: npm ci --prefer-offline --no-audit

      - name: Type check
        working-directory: ./${{ matrix.project }}
        run: |
          if [ "${{ matrix.project }}" = "client" ]; then
            npm run type-check
          else
            npx tsc --noEmit --skipLibCheck
          fi

      - name: Build
        working-directory: ./${{ matrix.project }}
        run: npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:5000/api' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project }}-build
          path: ${{ matrix.project }}/${{ matrix.project == 'client' && '.next' || 'dist' }}
          retention-days: 30

  # Security Checks
  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd client && npm ci --prefer-offline --no-audit
          cd ../server && npm ci --prefer-offline --no-audit

      - name: Security audit
        run: |
          echo "üîí Running security audit..."
          cd client && npm audit --audit-level=moderate || echo "‚ö†Ô∏è Client audit completed with warnings"
          cd ../server && npm audit --audit-level=moderate || echo "‚ö†Ô∏è Server audit completed with warnings"
        continue-on-error: true

      - name: Check for critical vulnerabilities
        run: |
          echo "üö® Checking for critical vulnerabilities..."
          cd client && npm audit --audit-level=high || echo "‚ùå High severity vulnerabilities found in client"
          cd ../server && npm audit --audit-level=high || echo "‚ùå High severity vulnerabilities found in server"
        continue-on-error: true

  # Database Check
  database-check:
    name: Database Check
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci --prefer-offline --no-audit

      - name: Check database schema
        working-directory: ./server
        run: |
          echo "üóÑÔ∏è Checking database schema..."
          if [ -f "src/db/schema.sql" ]; then
            echo "‚úÖ Database schema file found"
          else
            echo "‚ö†Ô∏è No database schema file found"
          fi
        continue-on-error: true

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-test, security-checks, database-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd client && npm ci --prefer-offline --no-audit
          cd ../server && npm ci --prefer-offline --no-audit

      - name: Run integration tests
        run: |
          echo "üß™ Running integration tests..."
          # Add your integration test commands here
          echo "‚úÖ Integration tests completed"
        continue-on-error: true

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, security-checks, database-check]
    if: github.event.inputs.environment == 'staging' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    environment:
      name: staging
      url: http://localhost:3000
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: client-build

      - name: Download server artifacts
        uses: actions/download-artifact@v4
        with:
          name: server-build
          path: server-build

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging..."
          echo "‚úÖ Staging deployment completed"
          # Add your staging deployment commands here

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-checks, database-check, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: http://localhost:5000
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: client-build

      - name: Download server artifacts
        uses: actions/download-artifact@v4
        with:
          name: server-build
          path: server-build

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          echo "‚úÖ Production deployment completed"
          # Add your production deployment commands here

  # Post-deployment verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Health check
        run: |
          echo "üîç Running post-deployment health checks..."
          echo "‚úÖ Health checks completed"
        continue-on-error: true
