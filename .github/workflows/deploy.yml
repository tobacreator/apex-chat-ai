name: Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: client
            working-directory: ./client
            package-manager: npm
            build-output: .next
          - name: server
            working-directory: ./server
            package-manager: npm
            build-output: dist

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ matrix.package-manager }}

      - name: Install dependencies
        working-directory: ${{ matrix.working-directory }}
        run: ${{ matrix.package-manager }} ci

      - name: Run linting
        working-directory: ${{ matrix.working-directory }}
        run: |
          if [ -f "package.json" ] && grep -q '"lint"' package.json; then
            ${{ matrix.package-manager }} run lint
          else
            echo "No lint script found, skipping..."
          fi

      - name: Build application
        working-directory: ${{ matrix.working-directory }}
        run: ${{ matrix.package-manager }} run build

      - name: Run tests
        working-directory: ${{ matrix.working-directory }}
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            ${{ matrix.package-manager }} test
          else
            echo "No test script found, skipping..."
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-build
          path: ${{ matrix.working-directory }}/${{ matrix.build-output }}
          if-no-files-found: ignore

  # Security and Quality Checks
  security-checks:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd client && npm ci
          cd ../server && npm ci

      - name: Run security audit
        run: |
          echo "Running security audit for client..."
          cd client && npm audit --audit-level=moderate || true
          echo "Running security audit for server..."
          cd ../server && npm audit --audit-level=moderate || true

      - name: Check for known vulnerabilities
        run: |
          echo "Checking for known vulnerabilities..."
          cd client && npm audit --audit-level=high || echo "High severity vulnerabilities found in client"
          cd ../server && npm audit --audit-level=high || echo "High severity vulnerabilities found in server"

  # Database Migration Check
  database-check:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install server dependencies
        run: |
          cd server && npm ci

      - name: Check database schema
        run: |
          cd server
          echo "Checking database schema files..."
          if [ -f "src/db/schema.sql" ]; then
            echo "‚úÖ Database schema file found"
            echo "Schema file size: $(wc -l < src/db/schema.sql) lines"
          else
            echo "‚ùå Database schema file missing"
            exit 1
          fi

      - name: Validate migration files
        run: |
          cd server
          echo "Checking migration files..."
          if [ -d "src/db" ]; then
            echo "Migration files found:"
            ls -la src/db/*.sql 2>/dev/null || echo "No SQL migration files found"
          fi

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [build-and-test, database-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd client && npm ci
          cd ../server && npm ci

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          cd server
          # Check if integration test script exists
          if [ -f "package.json" ] && grep -q '"test:integration"' package.json; then
            npm run test:integration
          else
            echo "No integration test script found, running basic tests..."
            npm test
          fi

  # Deployment Preparation
  prepare-deployment:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-checks, database-check, integration-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create deployment package
        run: |
          echo "Creating deployment package..."
          mkdir -p deployment
          
          # Copy client build
          if [ -d "client/.next" ]; then
            cp -r client/.next deployment/client-build
            echo "‚úÖ Client build copied"
          fi
          
          # Copy server build
          if [ -d "server/dist" ]; then
            cp -r server/dist deployment/server-build
            echo "‚úÖ Server build copied"
          fi
          
          # Copy package files
          cp client/package.json deployment/client-package.json
          cp server/package.json deployment/server-package.json
          
          # Copy environment templates
          if [ -f "client/.env.example" ]; then
            cp client/.env.example deployment/client-env.example
          fi
          if [ -f "server/.env.example" ]; then
            cp server/.env.example deployment/server-env.example
          fi
          
          # Copy deployment scripts
          if [ -f "deploy-safely.js" ]; then
            cp deploy-safely.js deployment/
          fi
          if [ -f "deployment-checklist.md" ]; then
            cp deployment-checklist.md deployment/
          fi

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment/
          retention-days: 30

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your staging deployment logic here
          echo "Staging deployment completed successfully!"

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          # Add your production deployment logic here
          echo "Production deployment completed successfully!"

      - name: Notify deployment success
        run: |
          echo "‚úÖ ApexChat AI Platform deployed successfully!"
          echo "Deployment timestamp: $(date -u)"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"

  # Post-deployment verification
  verify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Health check
        run: |
          echo "üîç Running post-deployment health checks..."
          # Add your health check logic here
          echo "Health checks completed successfully!"

      - name: Performance test
        run: |
          echo "‚ö° Running performance tests..."
          # Add your performance test logic here
          echo "Performance tests completed successfully!"

      - name: Final verification
        run: |
          echo "üéâ Deployment verification completed!"
          echo "ApexChat AI Platform is now live and operational!"
